<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Reflection" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="System" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="$(ProjectDir)T4Template\frame.ttinclude"  #>
<#
   // insert your template code here the tempalte code will be syntaxhighlighted 
   // and you will have intellisense for all namespaces in the full edition
#>
<# string solutionDir=Host.ResolveAssemblyReference("$(SolutionDir)"); #>
<# string prefix="T_";#>
	<# var tableList= T4Helper.GetTableList();#>
	<# 
    foreach (var item in tableList)
    {
		//生成仓储接口文件，不会覆盖原文件
		T4Helper.CreateIRepositoryFile(item,solutionDir,prefix); 
		//生成仓储文件，不会覆盖原文件
		T4Helper.CreateRepositoryFile(item,solutionDir,prefix); 
        //生成DomainService接口文件，不会覆盖原文件
		T4Helper.CreateIDomainServiceFile(item,solutionDir,prefix); 
		//生成DomainService文件，不会覆盖原文件
		T4Helper.CreateDomainServiceFile(item,solutionDir,prefix); 
        //生成ApplicationService接口文件，不会覆盖原文件
		T4Helper.CreateIApplicationServiceFile(item,solutionDir,prefix); 
		//生成ApplicationService文件，不会覆盖原文件
		T4Helper.CreateApplicationServiceFile(item,solutionDir,prefix); 
		T4Helper.CreateModelFile(item,solutionDir,prefix); 
    }
	#>

<#+
  // Insert any template procedures here
  void foo(){
  }
#>